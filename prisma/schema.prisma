generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model Role {
    id          String @id @default(cuid())
    name        String
    permissions String
    users       User[]

    @@unique([name])
    @@index([name])
    @@map("roles")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    users        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model Verification_token {
    id         String   @id @default(cuid())
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verification_tokens")
}

model User {
    id           String    @id @default(cuid())
    name         String?
    username     String?   @unique
    code         String?
    phonenumber  String?   @unique
    password     String
    description  String?
    is_active    Boolean   @default(true)
    image_url    String?
    display_name String?
    created_at   DateTime  @default(now())
    updated_at   DateTime?
    roleId       String?
    sessions     Session[]
    role         Role?     @relation(fields: [roleId], references: [id])
    brands       Brand[]
    orders       Order[]

    @@map("users")
}

model Category {
    id         String    @id @default(cuid())
    name       String
    icon_url   String
    created_at DateTime  @default(now())
    updated_at DateTime?
    brands     Brand[]   @relation("CategoryBrands")
    brandId    String?

    @@map("categories")
}

model Brand {
    id         String     @id @default(cuid())
    name       String     @unique
    image_url  String
    categories Category[] @relation("CategoryBrands")
    created_at DateTime   @default(now())
    updated_at DateTime?
    User       User?      @relation(fields: [userId], references: [id])
    userId     String?
    Order      Order[]

    @@map("brands")
}

model File {
    id               String    @id @default(cuid())
    tag              String?
    url              String?
    size             Int?
    mimetype         String?
    uploadPath       String?
    originalFilename String?
    newFilename      String?
    created_at       DateTime  @default(now())
    updated_at       DateTime?

    @@map("files")
}

model Order {
    id        String  @id @default(cuid())
    authority String  @unique() // used for checking if the payment recived
    has_payed Boolean @default(false)

    recipients Recipient[] // phonenumbers
    price      Int
    message    String?

    send_by_system Boolean   @default(false) // Indicates if the system should send the link
    send_date      DateTime? // Date when the link should be sent

    brand   Brand  @relation(fields: [brandId], references: [id])
    brandId String

    user   User?   @relation(fields: [userId], references: [id])
    userId String?

    created_at DateTime  @default(now())
    updated_at DateTime?

    @@map("orders")
}

model Recipient {
    id      String  @id @default(cuid())
    value   String // Store phone number or email
    type    String // "PHONE" or "EMAIL" to distinguish the recipient type
    order   Order?  @relation(fields: [orderId], references: [id])
    orderId String?

    created_at DateTime  @default(now())
    updated_at DateTime?

    @@map("recipients")
}

// enum RecipientType {
//     PHONE
//     EMAIL
// }
